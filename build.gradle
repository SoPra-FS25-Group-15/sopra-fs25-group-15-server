plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'io.freefair.lombok' version '6.6.3'
}

group 'ch.uzh.ifi.hasel'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:4.0.0"
    }
}

repositories {
    mavenCentral()
    maven {
        allowInsecureProtocol = true
        url 'https://maven.aliyun.com/repository/central'
    }
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

ext {
    lombokVersion = '1.18.26'
}

dependencies {
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Spring & WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework:spring-messaging'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    // WebSocket clients
    implementation 'org.webjars:sockjs-client:1.5.1'
    implementation 'org.webjars:stomp-websocket:2.3.4'

    // Dev tools & in-memory DB only for local development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2'

    // PostgreSQL driver & Cloud SQL socket factory for production
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.6'
    implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    // H2 runtime/test dependencies
    runtimeOnly 'com.h2database:h2'
    testRuntimeOnly 'com.h2database:h2'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonarqube {
    properties {
        property "sonar.projectKey", "julienzb_sopra-fs25-group-15-server"
        property "sonar.projectName", "sopra-fs25-group-15-server"
        property "sonar.organization", "sopra-fs25-group-15"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "${projectDir}/build/classes/java/main"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
}

tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value -> ext[name] = value }
}

defaultTasks 'bootJar', 'build'

// ------------------------------------------------
// Task to run the application in DEV mode via JavaExec
// ------------------------------------------------
task devRun(type: JavaExec) {
    group = 'application'
    description = 'Launch Spring Boot with the dev profile (H2, no GCP SQL)'

    // Use the main class and runtime classpath
    classpath = sourceSets.main.runtimeClasspath
    main = 'ch.uzh.ifi.hase.soprafs24.Application'

    // Activate the dev profile so Spring picks up all %dev.* props
    systemProperty 'spring.profiles.active', 'dev'

    // Ensure the Cloud-SQL auto-config is off for dev
    systemProperty 'spring.cloud.gcp.sql.enabled', 'false'
    systemProperty 'spring.cloud.gcp.sql.jdbc.enabled', 'false'
}
